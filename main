import concurrent.futures
import random

# 数独生成函数
def generate_sudoku():
    sudoku = [[0 for _ in range(9)] for _ in range(9)]
    # 在这里实现生成数独的逻辑
    return sudoku

def generate_multiple_sudokus():
    num_sudokus = 9  # 要生成的数独网格数量

    with concurrent.futures.ThreadPoolExecutor(max_workers=num_sudokus) as executor:
        # 并发生成数独网格
        sudokus = list(executor.map(lambda x: generate_sudoku(), range(num_sudokus)))

    return sudokus

if __name__ == "__main__":
    generated_sudokus = generate_multiple_sudokus()
    for idx, sudoku in enumerate(generated_sudokus):
        print(f"Sudoku {idx + 1}:")
        for row in sudoku:
            print(row)

def is_valid_move(board, row, col, num):
    # 检查同一行是否有重复数字
    if num in board[row]:
        return False

    # 检查同一列是否有重复数字
    if num in [board[i][col] for i in range(9)]:
        return False

    # 检查同一3x3宫格是否有重复数字
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False

    return True

def solve_sudoku(board):
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:
                for num in range(1, 10):
                    if is_valid_move(board, row, col, num):
                        board[row][col] = num
                        if solve_sudoku(board):
                            return True
                        board[row][col] = 0  # 回溯

                return False

    return True  # 所有空格都已填满

if __name__ == "__main__":
    #输入九宫格数独
    sudoku = [
  
    ]

    if solve_sudoku(sudoku):
        print("Sudoku is solvable:")
        for row in sudoku:
            print(row)
    else:
        print("Sudoku is not solvable.")
